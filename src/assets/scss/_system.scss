@use "sass:map";
@use 'utils' as *; 
@use 'themes' as *;

//
// Fonts
//

$font-default: 'Montserrat', sans-serif;
$font-header: 'Raleway', sans-serif;
$transition-default-interval: 1.4s;
$default-outline-offset: 4px; 
$search-page-control-radius: 24px;

$weights-map: (
  'regular': 400,
  'medium': 500,
  'semi-bold': 600,
  'bold': 700
);

$font-weights: (
  'body-primary': 'regular',
  'body-secondary': 'regular',
  'input-control': 'regular',
  'button': 'medium',
  'nav-link': 'semi-bold',
  'nav-control': 'medium',
  'category-caption': 'semi-bold',
  'entity-card-primary': 'medium'
);

$font-size-l: (
  'body-primary': 16px,
  'body-secondary': 14px,
  'input-control': 16px,
  'button': 14px,
  'nav-link': 14px,
  'nav-control': 14px,
  'category-caption': 16px,
  'entity-card-primary': 12px,
  'h1': 81px,
  'h2': 45px,
  'h3': 32px,
  'h4': 24px,
  'h5': 20px
);

body {
  @each $name, $sz in $font-size-l { 
    --#{$prefix}-font-#{$name}-sz: #{$sz};
  }
}

@mixin with-body-font($name) {
  font-family: $font-default;
  font-weight: map.get($weights-map, map.get($font-weights, $name));
  font-size: var(--#{$prefix}-font-#{$name}-sz);
}

@mixin with-header-font($level) {
  font-family: $font-header;
  @if $level == '1' or $level == '2' {
    font-weight: map.get($weights-map, map.get($weights-map, 'bold'));
    @if $level == '1' {
      font-size: 42px; // to fit heading on landing page for XS devices
    } @else {
      font-size: calc(var(--#{$prefix}-font-h#{$level}-sz) * 2 / 3);
    }
    @include for-large-and-extra-large() {
      font-size: var(--#{$prefix}-font-h#{$level}-sz);
    }
  } @else {
    font-size: var(--#{$prefix}-font-h#{$level}-sz);
    font-weight: map.get($weights-map, 'semi-bold');
  } 
}

//
// Spacings
//

$spacings: (
  '0': 0px,
  '1': 4px,
  '2': 8px,
  '3': 15px,
  '4': 24px,
  '5': 32px
);

@mixin compile-spacings($map, $cssPrefix, $cssClass, $deviceType) {
  @each $size, $val in $map { 
    .#{$cssPrefix}t-#{$deviceType}-#{$size} {
      #{$cssClass}-top: $val;
    }

    .#{$cssPrefix}r-#{$deviceType}-#{$size} {
      #{$cssClass}-right: $val;
    }

    .#{$cssPrefix}b-#{$deviceType}-#{$size} {
      #{$cssClass}-bottom: $val;
    }

    .#{$cssPrefix}l-#{$deviceType}-#{$size} {
      #{$cssClass}-left: $val;
    }

    .#{$cssPrefix}x-#{$deviceType}-#{$size} {
      #{$cssClass}-left: $val;
      #{$cssClass}-right: $val;
    }

    .#{$cssPrefix}y-#{$deviceType}-#{$size} {
      #{$cssClass}-top: $val;
      #{$cssClass}-bottom: $val;
    }

    .#{$cssPrefix}-#{$deviceType}-#{$size} {
      #{$cssClass}: $val;
    }
  }
}


@include compile-spacings($spacings, 'p', 'padding', 'xs');
@include for-small-and-above() {
  @include compile-spacings($spacings, 'p', 'padding', 's');
}
@include for-medium-and-large() {
  @include compile-spacings($spacings, 'p', 'padding', 'm');
}
@include for-large-and-extra-large() {
  @include compile-spacings($spacings, 'p', 'padding', 'l');
}
@include for-extra-large-only() {
  @include compile-spacings($spacings, 'p', 'padding', 'xl');
}

@include compile-spacings($spacings, 'm', 'margin', 'xs');
@include for-small-and-above() {
  @include compile-spacings($spacings, 'm', 'margin', 's');
}
@include for-medium-and-large() {
  @include compile-spacings($spacings, 'm', 'margin', 'm');
}
@include for-large-and-extra-large() {
  @include compile-spacings($spacings, 'm', 'margin', 'l');
}
@include for-extra-large-only() {
  @include compile-spacings($spacings, 'm', 'margin', 'xl');
}

//
// Borders
//

$borders-radius: (
  '1': 4px,
  '2': 8px,
  '3': 16px,
  '4': 20px,
  '5': 24px,
  '6': 30px
);

@each $size, $val in $borders-radius { 
  .brdr-#{$size} {
    border-radius: $val;
  }
}

//
// Outline
//
@mixin with-outline($offset: $default-outline-offset) {
  outline: 1px;
  outline-offset: $offset;
  outline-style: solid;

  @include with-theme-color('outline') using($css-var) {
    outline-color: var($css-var);
  }
}
  
